import{j as e}from"./jsx-runtime-CkxqCPlQ.js";import{r as s}from"./index-DJO9vBfz.js";const m=s.forwardRef((r,o)=>{const n=s.useRef(null);return s.useImperativeHandle(o,()=>({focus:()=>{var i;(i=n.current)==null||i.focus()}})),e.jsx("input",{className:"p-2",ref:n,type:"text"})}),a=()=>{const r=s.useRef(null);return e.jsxs("div",{children:["Parent:",e.jsx("button",{className:"button",onClick:()=>{var o;return(o=r.current)==null?void 0:o.focus()},children:"Focus Child Input"}),e.jsx("br",{}),e.jsx("br",{}),"Child:",e.jsx(m,{ref:r})]})};a.__docgenInfo={description:"",methods:[],displayName:"UseImperativeHandleExample"};const f={title:"Hooks/UseImperativeHandleExample",component:a,tags:["autodocs"],parameters:{docs:{description:{component:"\n### What is `useImperativeHandle`?\n\nThe `useImperativeHandle` hook allows you to customize the `ref` instance exposed to the parent component. It’s commonly used with `forwardRef`.\n\n### Deep Technical Explanation\n\n- The `ref` object exposes methods or properties explicitly defined using `useImperativeHandle`.\n- Ideal for controlling child behavior from the parent without directly accessing its internal implementation.\n\n### Practical Examples\n\n1. **Custom Methods:** Expose a `focus` method for a child input component.\n2. **Controlling Animations:** Allow parent components to trigger animations or transitions.\n3. **Scroll Management:** Provide methods to scroll to a specific part of a child component.\n\n### Key Points for Interviews\n\n- **Forwarding Refs:** Combine `useImperativeHandle` with `forwardRef` to expose the `ref` correctly.\n- **Encapsulation:** Expose only what’s necessary; avoid leaking implementation details.\n- **Alternatives:** For simpler cases, directly use `useRef`.\n\n### Example Usage\n```tsx\nconst ref = useRef();\n<Child ref={ref} />;\nref.current.focus(); // Calls the focus method exposed by the child component.\n```\n        "}}}},t=()=>e.jsx(a,{});t.__docgenInfo={description:"",methods:[],displayName:"Default"};var l,c,p;t.parameters={...t.parameters,docs:{...(l=t.parameters)==null?void 0:l.docs,source:{originalSource:"() => <UseImperativeHandleExample />",...(p=(c=t.parameters)==null?void 0:c.docs)==null?void 0:p.source}}};const h=["Default"];export{t as Default,h as __namedExportsOrder,f as default};
